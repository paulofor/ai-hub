name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Build backend
        run: mvn -f apps/backend -B test

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json
      - name: Install deps
        run: npm --prefix apps/frontend ci
      - name: Lint
        run: npm --prefix apps/frontend run lint

  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io/${{ github.repository_owner }}
      IMAGE_TAG: ${{ github.sha }}
      SHOULD_PUSH: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        if: ${{ env.SHOULD_PUSH == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          file: apps/backend/Dockerfile
          push: ${{ env.SHOULD_PUSH == 'true' }}
          tags: |
            ${{ env.REGISTRY }}/ai-hub-backend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/ai-hub-backend:latest
          cache-from: type=gha,scope=backend
          cache-to: type=gha,scope=backend,mode=max
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: apps/frontend
          file: apps/frontend/Dockerfile
          push: ${{ env.SHOULD_PUSH == 'true' }}
          tags: |
            ${{ env.REGISTRY }}/ai-hub-frontend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/ai-hub-frontend:latest
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,scope=frontend,mode=max

  deploy:
    if: github.ref == 'refs/heads/main'
    needs:
      - backend
      - frontend
      - docker
    runs-on: ubuntu-latest
    env:
      DEPLOY_HOST: 191.252.120.96
      DEPLOY_USER: root
      REMOTE_PATH: /root/ai-hub
    steps:
      - uses: actions/checkout@v4
      - name: Configure SSH
        env:
          VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        run: |
          install -m 700 -d ~/.ssh
          printf '%s\n' "${VPS_SSH_KEY}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          printf '%s\n' "SSH_COMMON_ARGS=-i $HOME/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o TCPKeepAlive=yes -o ConnectTimeout=60" >> "$GITHUB_ENV"
      - name: Prepare remote directory
        run: |
          ssh ${SSH_COMMON_ARGS} "${DEPLOY_USER}@${DEPLOY_HOST}" "mkdir -p ${REMOTE_PATH}"
      - name: Sync repository to VPS
        run: |
          rsync -az --delete \
            -e "ssh ${SSH_COMMON_ARGS}" \
            --exclude '.git/' \
            --exclude 'node_modules/' \
            ./ "${DEPLOY_USER}@${DEPLOY_HOST}:${REMOTE_PATH}"
      - name: Publish frontend and backend
        env:
          REGISTRY: ghcr.io/${{ github.repository_owner }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh ${SSH_COMMON_ARGS} "${DEPLOY_USER}@${DEPLOY_HOST}" "set -euo pipefail && cd ${REMOTE_PATH} && \
            export BACKEND_IMAGE='${REGISTRY}/ai-hub-backend:${IMAGE_TAG}' FRONTEND_IMAGE='${REGISTRY}/ai-hub-frontend:${IMAGE_TAG}' && \
            docker compose -f docker-compose.yml -f docker-compose.deploy.yml pull && \
            docker compose -f docker-compose.yml -f docker-compose.deploy.yml up -d --remove-orphans"
